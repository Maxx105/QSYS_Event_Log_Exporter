-- Basic Framework Plugin
-- by QSC
-- October 2020

-- Information block for the plugin
PluginInfo = {
  Name = "My Plugins~Log Exporter",
  Version = "1.0",
  BuildVersion = "1.1.0.0",
  Id = "1e886705-4f8b-403e-9a2f-02bdb899a0db",
  Author = "QSC",
  Description = "A simple plugin to export the Core's Event Log to a .csv"  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 155, 210, 250 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Get Log\nv" .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Control" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Base Model" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls, {
    Name = "GetLog",
    ControlType = "Button",
    ButtonType = "Trigger",
    Count = 1,
    UserPin = true,
    PinStyle = "Both",
    Icon = "Page Export CSV"
  })
  table.insert(ctrls, {
    Name = "Status",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  if CurrentPage == "Control" then
    table.insert(graphics,{
      Type = "GroupBox",
      Fill = {220,220,220},
      StrokeWidth = 2,
      CornerRadius = 5,
      Position = {9,17},
      Size = {261,204}
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Click the CSV button below to save a myEvents.csv file your /designs/current_design directory. To access it, in a browser, go to https://<IP of Core>/designs/current_design.",
      Position = {33,22},
      Size = {211,108},
      FontSize = 12,
      HTextAlign = "Center"
    })
    layout["GetLog"] = {
      PrettyName = "Get Log",
      Style = "Button",
      CornerRadius = 8,
      Position = {75,127},
      Size = {125,57},
      Color = {0,0,0}
    }
    layout["Status"] = {
      PrettyName = "Status",
      Style = "Text",
      Position = {56,192},
      Size = {160,16},
      FontSize = 14,
      StrokeWidth = 0;
      Color = {255,255,255,0}
    }
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  json = require("rapidjson")
  eventUpdatePoll = Timer.New()
  timezones = Controls['TimeZones']
  getLog = Controls['GetLog']
  status = Controls['Status']
  statusTimer = Timer.New()
  local eventsArray = {}
  local timezonesArray = {}
  local timeZoneLocation = ""
  local utcOffset = "0"
  
  function getEventsData(tbl, code, data, err, headers)
    print(string.format( "HTTP response from '%s': Return Code=%i; Error=%s", tbl.Url, code, err or "None" ) )
    eventsData = json.decode(data, { pretty=true, sort_keys=sort })
    saveToFile(eventsData)
  end
  
  function getTimeZoneOffset(tbl, code, data, err, headers)
    print(string.format( "HTTP response from '%s': Return Code=%i; Error=%s", tbl.Url, code, err or "None" ) )
    dateTimeInfo = json.decode(data)
    utcOffset = string.sub(dateTimeInfo.dateTimeUTC, -5, -3)
  end
  
  function saveToFile(data)
    io.output("design/myEvents.csv")
    io.write("SEVERITY,MESSAGE,DATE,CATEGORY,SOURCE\r\n")
    for i, v in ipairs(data.items) do
      io.write(v.severity..","..removeCommas(v.message)..","..convertToReadableDate(v.dateTime)..","..v.category..","..v.source.."\r\n")
    end
    io.close() 
  end
  
  function convertToReadableDate(dateTime)
    dateValues = {}
  	for w in string.gmatch(dateTime, "%d+") do
      table.insert(dateValues, w)
  	end
    dt = {year=dateValues[1], month=dateValues[2], day=dateValues[3], hour=setHourForTimeZone(dateValues[4]), min=dateValues[5], sec=dateValues[6]}
    return os.date("%d %b %Y - %H:%M:%S", os.time(dt))
  end
  
  function removeCommas(str)
     return string.gsub(str, ",", "-")
  end
  
  function setHourForTimeZone(hour)
    return tonumber(hour)+tonumber(string.sub(utcOffset, 1, 3))
  end
  
  function eventsHTTPDownload() 
    eventsArray = {}
    HttpClient.Download { 
      Url = "http://127.0.0.1/api/v0/systems/1/events?page=1&pageSize=1600", 
      Headers = { ["Content-Type"] = "application/json" } , 
      Timeout = 5, 
      EventHandler = getEventsData 
    }
  end
  
  function getHTTPDateTime()
    HttpClient.Download { 
      Url = "http://127.0.0.1/api/v0/cores/self/config/time", 
      Headers = { ["Content-Type"] = "application/json" } , 
      Timeout = 5, 
      EventHandler = getTimeZoneOffset
    }
  end
  
  getLog.EventHandler = function()
    getHTTPDateTime()
    status.String = "Creating CSV..."
    statusTimer:Start(3)
  end
  
  statusTimer.EventHandler = function()
    statusTimer:Stop()
    eventsHTTPDownload()
    status.String = "CSV Created!"
  end
  
  status.String = ""
  getHTTPDateTime()
  
end
